// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Some external code from Zig
class Structs {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Structs(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Structs.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> hello_world() {
    return _hello_world();
  }

  late final _hello_worldPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'hello_world');
  late final _hello_world =
      _hello_worldPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> hello_world_slice() {
    return _hello_world_slice();
  }

  late final _hello_world_slicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'hello_world_slice');
  late final _hello_world_slice =
      _hello_world_slicePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> reverse(
    ffi.Pointer<ffi.Char> a0,
    int a1,
  ) {
    return _reverse(
      a0,
      a1,
    );
  }

  late final _reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('reverse');
  late final _reverse = _reversePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  void free_string(
    ffi.Pointer<ffi.Char> a0,
  ) {
    return _free_string(
      a0,
    );
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_string');
  late final _free_string =
      _free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<Coordinate> create_coordinate(
    double a0,
    double a1,
  ) {
    return _create_coordinate(
      a0,
      a1,
    );
  }

  late final _create_coordinatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Coordinate> Function(
              ffi.Double, ffi.Double)>>('create_coordinate');
  late final _create_coordinate = _create_coordinatePtr
      .asFunction<ffi.Pointer<Coordinate> Function(double, double)>();

  ffi.Pointer<Place> create_place(
    ffi.Pointer<Place> a0,
  ) {
    return _create_place(
      a0,
    );
  }

  late final _create_placePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Place> Function(ffi.Pointer<Place>)>>(
      'create_place');
  late final _create_place = _create_placePtr
      .asFunction<ffi.Pointer<Place> Function(ffi.Pointer<Place>)>();

  double distance(
    Coordinate a0,
    Coordinate a1,
  ) {
    return _distance(
      a0,
      a1,
    );
  }

  late final _distancePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Coordinate, Coordinate)>>(
          'distance');
  late final _distance =
      _distancePtr.asFunction<double Function(Coordinate, Coordinate)>();

  ffi.Pointer<ffi.Char> print_name(
    ffi.Pointer<ffi.Char> a0,
  ) {
    return _print_name(
      a0,
    );
  }

  late final _print_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('print_name');
  late final _print_name = _print_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();
}

final class Coordinate extends ffi.Struct {
  @ffi.Double()
  external double latitude;

  @ffi.Double()
  external double longitude;
}

final class Place extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external Coordinate coordinate;
}
