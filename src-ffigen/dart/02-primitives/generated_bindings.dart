// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Some external code from Zig
class Primitives {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Primitives(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Primitives.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int sum(
    int a0,
    int a1,
  ) {
    return _sum(
      a0,
      a1,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long, ffi.Long)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Long> multiply(
    int a0,
    int a1,
  ) {
    return _multiply(
      a0,
      a1,
    );
  }

  late final _multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Long> Function(ffi.Long, ffi.Long)>>('multiply');
  late final _multiply =
      _multiplyPtr.asFunction<ffi.Pointer<ffi.Long> Function(int, int)>();

  void free_pointer(
    ffi.Pointer<ffi.Long> a0,
  ) {
    return _free_pointer(
      a0,
    );
  }

  late final _free_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Long>)>>(
          'free_pointer');
  late final _free_pointer =
      _free_pointerPtr.asFunction<void Function(ffi.Pointer<ffi.Long>)>();

  int subtract(
    ffi.Pointer<ffi.Int> a0,
    int a1,
  ) {
    return _subtract(
      a0,
      a1,
    );
  }

  late final _subtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Int>, ffi.Long)>>('subtract');
  late final _subtract =
      _subtractPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();
}
